warning: LF will be replaced by CRLF in Problem solving with strings.ipynb.
The file will have its original line endings in your working directory.
warning: LF will be replaced by CRLF in Programs workflow.ipynb.
The file will have its original line endings in your working directory.
[1mdiff --git a/Problem solving with strings.ipynb b/Problem solving with strings.ipynb[m
[1mindex 9a6d695..c0ef376 100644[m
[1m--- a/Problem solving with strings.ipynb[m	
[1m+++ b/Problem solving with strings.ipynb[m	
[36m@@ -1,27 +1,17 @@[m
 {[m
  "cells": [[m
   {[m
[31m-   "cell_type": "code",[m
[31m-   "execution_count": null,[m
[32m+[m[32m   "cell_type": "markdown",[m
    "metadata": {},[m
[31m-   "outputs": [],[m
    "source": [[m
[31m-    "names = ['sam', 'john', 'lopez', 'gomez']\n",[m
[31m-    "\n",[m
[31m-    "filtered_list = list(filter(lambda names1: (names1 != 'sam'), names))\n",[m
[31m-    "\n",[m
[31m-    "print(filtered_list)"[m
[32m+[m[32m    "## String operations"[m
    ][m
   },[m
   {[m
[31m-   "cell_type": "code",[m
[31m-   "execution_count": null,[m
[32m+[m[32m   "cell_type": "markdown",[m
    "metadata": {},[m
[31m-   "outputs": [],[m
    "source": [[m
[31m-    "str= 'gemba'\n",[m
[31m-    "k= str.upper()\n",[m
[31m-    "k"[m
[32m+[m[32m    "1. Remove name 'sam' from the list below using a lambda function"[m
    ][m
   },[m
   {[m
[36m@@ -33,19 +23,52 @@[m
      "name": "stdout",[m
      "output_type": "stream",[m
      "text": [[m
[31m-      "karkade\n"[m
[32m+[m[32m      "['john', 'lopez', 'gomez']\n"[m
      ][m
     }[m
    ],[m
    "source": [[m
[31m-    "string =\"edakrak\"\n",[m
[32m+[m[32m    "names = ['sam', 'john', 'lopez', 'gomez']\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "filtered_list = list(filter(lambda names1: (names1 != 'sam'), names))\n",[m
     "\n",[m
[31m-    "list= range(6)\n",[m
[31m-    "if(type(list)==list):\n",[m
[31m-    "    print(string[::2],string[1::2], sep=\"\")\n",[m
[31m-    "          \n",[m
[31m-    "else:\n",[m
[31m-    "    print(string[::-1])"[m
[32m+[m[32m    "print(filtered_list)"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "2. Change all the letters of a word to uppercase"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 2,[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "data": {[m
[32m+[m[32m      "text/plain": [[m
[32m+[m[32m       "'GEMBA'"[m
[32m+[m[32m      ][m
[32m+[m[32m     },[m
[32m+[m[32m     "execution_count": 2,[m
[32m+[m[32m     "metadata": {},[m
[32m+[m[32m     "output_type": "execute_result"[m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "str= 'gemba'\n",[m
[32m+[m[32m    "k= str.upper()\n",[m
[32m+[m[32m    "k"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "3. Remove the spaces in a string"[m
    ][m
   },[m
   {[m
[36m@@ -72,11 +95,26 @@[m
     "removespace(string)"[m
    ][m
   },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "4. Print all the vowels included in a sentence"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
   {[m
    "cell_type": "code",[m
[31m-   "execution_count": null,[m
[32m+[m[32m   "execution_count": 4,[m
    "metadata": {},[m
[31m-   "outputs": [],[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      " a e  i   u   "[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
    "source": [[m
     "VOWELS = \"aeiou\"\n",[m
     "\n",[m
[36m@@ -89,28 +127,44 @@[m
     "        print(' ', end='')"[m
    ][m
   },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "5. Sort the names of the soccer players alphabetically with the first letter of their surname. Use a lambda function"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
   {[m
    "cell_type": "code",[m
[31m-   "execution_count": null,[m
[32m+[m[32m   "execution_count": 18,[m
    "metadata": {},[m
[31m-   "outputs": [],[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "8\n",[m
[32m+[m[32m      "7\n",[m
[32m+[m[32m      "5\n",[m
[32m+[m[32m      "9\n",[m
[32m+[m[32m      "6\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
    "source": [[m
[31m-    "# remove all the vawols of the string provided, then keep every odd letter\n",[m
[32m+[m[32m    "soccer_players = ['Roberto Carlos', 'Didier Drogba', 'John Terry', 'Miroslav Klose', 'Lucas Podolski']\n",[m
     "\n",[m
[31m-    "str= 'Launchode'\n",[m
[31m-    "\n",[m
[31m-    "novols= \"global\"\n",[m
[31m-    "def novols(str):\n",[m
[32m+[m[32m    "for player in soccer_players:\n",[m
[32m+[m[32m    "#     X = player.split()\n",[m
[32m+[m[32m    "#     print(X)\n",[m
[32m+[m[32m    "    X = player.index(' ')\n",[m
[32m+[m[32m    "    y = X+1\n",[m
     "    \n",[m
[31m-    "    novols=''\n",[m
[31m-    "    vols='aeiou'\n",[m
[32m+[m[32m    "    print(y)\n",[m
     "    \n",[m
[31m-    "    for i in str:\n",[m
[31m-    "        if i in vols:\n",[m
[31m-    "            novlos += i\n",[m
[31m-    "        return novlos\n",[m
[31m-    "\n",[m
[31m-    "novols(str) "[m
[32m+[m[32m    "soccer_players.sort()\n",[m
[32m+[m[32m    "#p = lambda X: (X.split(), soccer_players)\n",[m
[32m+[m[32m    "\n"[m
    ][m
   }[m
  ],[m
[1mdiff --git a/Programs workflow.ipynb b/Programs workflow.ipynb[m
[1mindex 9ff45fa..d6e139a 100644[m
[1m--- a/Programs workflow.ipynb[m	
[1m+++ b/Programs workflow.ipynb[m	
[36m@@ -17,9 +17,21 @@[m
   },[m
   {[m
    "cell_type": "code",[m
[31m-   "execution_count": null,[m
[32m+[m[32m   "execution_count": 4,[m
    "metadata": {},[m
[31m-   "outputs": [],[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "ename": "TypeError",[m
[32m+[m[32m     "evalue": "black_coffee() missing 1 required positional argument: 'self'",[m
[32m+[m[32m     "output_type": "error",[m
[32m+[m[32m     "traceback": [[m
[32m+[m[32m      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",[m
[32m+[m[32m      "\u001b[1;31mTypeError\u001b[0m                                 Traceback (most recent call last)",[m
[32m+[m[32m      "\u001b[1;32m<ipython-input-4-7e1de638637b>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m     14\u001b[0m         \u001b[1;32mreturn\u001b[0m \u001b[0mmilk\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0msugar\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mcoffee\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     15\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 16\u001b[1;33m \u001b[0mask_order\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mblack_coffee\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",[m
[32m+[m[32m      "\u001b[1;31mTypeError\u001b[0m: black_coffee() missing 1 required positional argument: 'self'"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
    "source": [[m
     "class ask_order:\n",[m
     "    def __init__ (self, coffee, sugar, milk):\n",[m
[36m@@ -36,7 +48,14 @@[m
     "    def sweet_milk_coffee(self):\n",[m
     "        return milk, sugar, coffee\n",[m
     "    \n",[m
[31m-    "ask_order.black_coffee(self)  "[m
[32m+[m[32m    "ask_order.black_coffee()  "[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "Calculator"[m
    ][m
   },[m
   {[m
